import type { NextPage } from "next";
import Head from "next/head";
import { Container, Content, Field, Message,Errorr } from "../styles/login.style";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import axios from "axios";
import CircularProgress from "@mui/material/CircularProgress"
import { useRef, useState } from "react";
import { useRouter} from 'next/router'


interface FormInput {
  email: string;
  password: string;
  fullName: string;
  userType: string;
}

const schema = yup.object({
  email: yup.string().required(),
  password: yup.string().required().min(6).max(16),
  fullName: yup.string().required(),
  userType: yup.string().required(),
});

const Home: NextPage = () => {
  const [loading, setLoading] = useState(false)
  const timer: any = useRef()
  const [success, setSuccess] = useState(false);
  const [err, setErr] = useState(false);
  const router = useRouter()
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormInput>({
    resolver: yupResolver(schema),
  });

  const onSubmit = (data: FormInput) => {
      setLoading(true);
      timer.current = window.setTimeout(() => {
        setLoading(false);
      }, 3000);
    axios
      .post(
        "https://auth-test-api-techinnover.herokuapp.com/api/v1/user/create",
        data
      )
      .then((res) => {
        window.localStorage.setItem("data", JSON.stringify(res.data));
        setSuccess(true);
        timer.current = window.setTimeout(() => {
          setSuccess(false);
        }, 4000);
        setErr(false);
        router.push('/')
      })
      .catch((error) => {
        console.log(error);
        setSuccess(false);
        setErr(true);
        timer.current = window.setTimeout(() => {
          setErr(false);
        }, 4000);
      });
  };
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        {success ? (
          <Message>
            <p>Your password has been changed successfully</p>
          </Message>
        ) : null}

        {err ? (
          <Errorr className={success ? "none" : "show"}>
            <p>You recently used this password, please try something else</p>
          </Errorr>
        ) : null}
        <Content>
          <h2>Signup</h2>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Field>
              <label htmlFor="title">Email Address</label>
              <input
                type="email"
                {...register("email")}
                placeholder="Enter your email address"
              />
            </Field>
            <Field>
              <label htmlFor="password">Password</label>
              <input
                type="password"
                {...register("password")}
                placeholder="Enter your Password"
              />
              <p>{errors.password?.message}</p>
            </Field>
            <Field>
              <label htmlFor="name">Full Name</label>
              <input
                type="text"
                {...register("fullName")}
                placeholder="Enter your Full name"
              />
            </Field>
            <Field>
              <label htmlFor="userType">Role</label>
              <select {...register("userType")}>
                <option value="student">Student</option>
                <option value="lecturer">Lecture</option>
              </select>
            </Field>
            <button type="submit">
              {" "}
              {loading ? (
                <CircularProgress size={30} sx={{ color: "white" }} />
              ) : (
                "Sign Up"
              )}
            </button>
          </form>
        </Content>
      </Container>
    </div>
  );
};

export default Home;
